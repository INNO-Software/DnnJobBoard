using System;
using System.Linq;
using System.Web.Mvc;
using Dnn.Modules.DnnJobBoard.Components;
using Dnn.Modules.DnnJobBoard.Models;
using DotNetNuke.Web.Mvc.Framework.Controllers;
using DotNetNuke.Web.Mvc.Framework.ActionFilters;
using DotNetNuke.Entities.Users;
using DotNetNuke.Framework.JavaScriptLibraries;

namespace Dnn.Modules.DnnJobBoard.Controllers
{
    public class ItemController : DnnController
    {
        [ModuleAction(ControlKey = "Edit", TitleKey = "AddItem")]
      
        public ActionResult Index()
        {
            var items = ItemManager.Instance.GetItems(ModuleContext.ModuleId);
            return View(items);
        }
        
        public ActionResult Edit(int itemId = -1)
        {
            DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            var userlist = UserController.GetUsers(PortalSettings.PortalId);
            var users = from user in userlist.Cast<UserInfo>().ToList()
                        select new SelectListItem { Text = user.DisplayName, Value = user.UserID.ToString() };

            ViewBag.Users = users;

            var item = (itemId == -1)
                 ? new Item { ModuleId = ModuleContext.ModuleId }
                 : ItemManager.Instance.GetItem(itemId, ModuleContext.ModuleId);

            return View(item);
        }

        public ActionResult Details(int itemId = -1)
        {
            if (itemId == -1 | itemId == 0)
            {
                // the user is trying to delete a record they are creating, just disregard the request                
            }
            else
            {
                // register the DnnPlugins JS into the control
                DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                //// get DNN users for this portal
                //var userlist = UserController.GetUsers(PortalSettings.PortalId);
                //// for every user in the portal populate a selectlistitem 
                //var users = from user in userlist.Cast<UserInfo>().ToList()
                //            select new SelectListItem { Text = user.DisplayName, Value = user.UserID.ToString() };
                //// store the selectlistitem full of users in a users viewbag
                //ViewBag.Users = users;

                // if the item is new then generate it, otherwise load it from the system
                // var item = (itemId == -1)
                //  ? new Item { ModuleId = ModuleContext.ModuleId }
                //: ItemManager.Instance.GetItem(itemId, ModuleContext.ModuleId);

                var item = ItemManager.Instance.GetItem(itemId, ModuleContext.ModuleId);

                // return the item we are viewing
                return View(item);
            }

            return RedirectToDefaultRoute();
        }

        [HttpPost]
        public ActionResult Edit(Item job)
        {
            
            // is this a non-existent item
            if (job.ItemId == -1 || job.ItemId == 0)
            {
                // which user added this record
                job.CreatedByUserId = User.UserID;
                // the user that modified the record is one and the same as he/she who created this record
                job.LastModifiedByUserId = User.UserID;
                // set record creation date to now
                job.CreatedOnDate = DateTime.UtcNow;
                // the modified date is the same as the creation date
                job.LastModifiedOnDate = DateTime.UtcNow;
                // the module id to allow filtering data by module instance
                job.ModuleId = job.ModuleId;
            
                // submit the item for creation
                ItemManager.Instance.CreateItem(job);
            }

            else // load an existing item
            {
                var existingItem = ItemManager.Instance.GetItem(job.ItemId, job.ModuleId);                
                // item = ItemManager.Instance.GetItem(item.ItemId, item.ModuleId);
           
                // These fields will have been when this record was created...
                // They are only here for reference
                // ItemId = AutoGenerated
                // CreatedByUserId = User.UserID;
                // CreatedOnDate = DateTime.UtcNow;
                // PostingDate = DateTime.UtcNow;

                // the module id to allow filtering data by module instance
                existingItem.ModuleId = job.ModuleId;
                // optional in-house generated for the posting
                existingItem.PostingNumber = job.PostingNumber;
                // when was the job posted (as in, by the company, not to the database)
                existingItem.PostingDate = job.PostingDate;

                // when is the job posting closed 
                if (job.PostingCloseDate != null)
                {
                    existingItem.PostingCloseDate = job.PostingCloseDate;
                } 

                // job title
                existingItem.JobTitle = job.JobTitle;
                // job summary
                existingItem.JobSummary = job.JobSummary;
                // terms of the employment such a full time vs. part time
                existingItem.EmploymentTerm = job.EmploymentTerm;
                // the geographical region where the job is located
                existingItem.Region = job.Region;
                // pay rate for the job
                existingItem.RateOfPay = job.RateOfPay;
                // benefits such as an outline of health plans or vacation terms and the like
                existingItem.Benefits = job.Benefits;
                // required qualifications for the job
                existingItem.RequiredQualifications = job.RequiredQualifications;
                // required experience for the job
                existingItem.RequiredExperience = job.RequiredExperience;
                // shift information, such as 'M-F', '4 days on 3 days off', etc.
                existingItem.ShiftInfo = job.ShiftInfo;
                // the working hours such as 'weekly rotation', 'on call', '9am-5pm;
                existingItem.WorkHours = job.WorkHours;
                // the office where the job is located
                existingItem.Office = job.Office;
                // department, if applicable, for this position
                existingItem.Department = job.Department;
                // affiliation such as a union or other form of segmentation used by the employer
                existingItem.Affiliation = job.Affiliation;
                // any additional information pertaining to the job
                existingItem.AdditionalInfo = job.AdditionalInfo;
                // number of job openings               
                existingItem.NumberOfOpenings = job.NumberOfOpenings;
                // update the last modified user id
                existingItem.LastModifiedByUserId = User.UserID;
                // update the last modified date
                existingItem.LastModifiedOnDate = DateTime.UtcNow;

                ItemManager.Instance.UpdateItem(existingItem);
            }

            return RedirectToDefaultRoute();
        }

        public ActionResult Delete(int itemId)
        {
            ItemManager.Instance.DeleteItem(itemId, ModuleContext.ModuleId);
            return RedirectToDefaultRoute();
        }

    }
}
